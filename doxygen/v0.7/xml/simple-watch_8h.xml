<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="simple-watch_8h" kind="file" language="C++">
    <compoundname>simple-watch.h</compoundname>
    <includes local="no">poll.h</includes>
    <includes local="no">avahi-common/cdecl.h</includes>
    <includes refid="watch_8h" local="no">avahi-common/watch.h</includes>
    <incdepgraph>
      <node id="101">
        <label>avahi-common/simple-watch.h</label>
        <link refid="simple-watch_8h"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>poll.h</label>
      </node>
      <node id="103">
        <label>avahi-common/cdecl.h</label>
      </node>
      <node id="104">
        <label>avahi-common/watch.h</label>
        <link refid="watch_8h"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>sys/time.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" prot="public" static="no">
        <type>struct <ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref></type>
        <definition>typedef struct AvahiSimplePoll AvahiSimplePoll</definition>
        <argsstring></argsstring>
        <name>AvahiSimplePoll</name>
        <briefdescription>
<para>A main loop object. </para>        </briefdescription>
        <detaileddescription>
<para>Main loops of this type aren&apos;t very flexible since they only support a single wakeup type. Nevertheless it should suffice for small test and example applications. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="91" column="1" bodyfile="avahi-common/simple-watch.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="simple-watch_8h_1a01aa2227371c60cb28c03c0db518790a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* AvahiPollFunc) (struct pollfd *ufds, unsigned int nfds, int timeout, void *userdata)</definition>
        <argsstring>)(struct pollfd *ufds, unsigned int nfds, int timeout, void *userdata)</argsstring>
        <name>AvahiPollFunc</name>
        <briefdescription>
<para>Prototype for a poll() type function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="63" column="1" bodyfile="avahi-common/simple-watch.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="simple-watch_8h_1a4548a645c8ae50edd0617c8d9a15a9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
        <definition>AvahiSimplePoll* avahi_simple_poll_new</definition>
        <argsstring>(void)</argsstring>
        <name>avahi_simple_poll_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new main loop object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1a2d23c812725d77cf4c6478d249bb434e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void avahi_simple_poll_free</definition>
        <argsstring>(AvahiSimplePoll *s)</argsstring>
        <name>avahi_simple_poll_free</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Free a main loop object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1a8e7a53b4116c2379d04f8298398e59e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_avahi_poll" kindref="compound">AvahiPoll</ref> *</type>
        <definition>const AvahiPoll* avahi_simple_poll_get</definition>
        <argsstring>(AvahiSimplePoll *s)</argsstring>
        <name>avahi_simple_poll_get</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return the abstracted poll API object for this main loop object. </para>        </briefdescription>
        <detaileddescription>
<para>The is will return the same pointer each time it is called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1ad5b7c9d3b7a6584d609241ee6f472a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avahi_simple_poll_iterate</definition>
        <argsstring>(AvahiSimplePoll *s, int sleep_time)</argsstring>
        <name>avahi_simple_poll_iterate</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sleep_time</declname>
        </param>
        <briefdescription>
<para>Run a single main loop iteration of this main loop. </para>        </briefdescription>
        <detaileddescription>
<para>If sleep_time is &lt; 0 this will block until any of the registered events happens, then it will execute the attached callback function. If sleep_time is 0 the routine just checks if any event is pending. If yes the attached callback function is called, otherwise the function returns immediately. If sleep_time &gt; 0 the function will block for at most the specified time in msecs. Returns -1 on error, 0 on success and 1 if a quit request has been scheduled. Usually this function should be called in a loop until it returns a non-zero value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1ac2771664e4e6c7e75e5b5a270e5e0490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void avahi_simple_poll_quit</definition>
        <argsstring>(AvahiSimplePoll *s)</argsstring>
        <name>avahi_simple_poll_quit</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Request that the main loop quits. </para>        </briefdescription>
        <detaileddescription>
<para>If this is called the next call to <ref refid="simple-watch_8h_1ad5b7c9d3b7a6584d609241ee6f472a2e" kindref="member">avahi_simple_poll_iterate()</ref> will return 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1a5bf2e34462070d8e035ec092da13eac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void avahi_simple_poll_set_func</definition>
        <argsstring>(AvahiSimplePoll *s, AvahiPollFunc func, void *userdata)</argsstring>
        <name>avahi_simple_poll_set_func</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="simple-watch_8h_1a01aa2227371c60cb28c03c0db518790a" kindref="member">AvahiPollFunc</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <briefdescription>
<para>Replace the internally used poll() function. </para>        </briefdescription>
        <detaileddescription>
<para>By default the system&apos;s poll() will be used </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1ac32aace91b19902bd70633590823e730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avahi_simple_poll_prepare</definition>
        <argsstring>(AvahiSimplePoll *s, int timeout)</argsstring>
        <name>avahi_simple_poll_prepare</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>The first stage of <ref refid="simple-watch_8h_1ad5b7c9d3b7a6584d609241ee6f472a2e" kindref="member">avahi_simple_poll_iterate()</ref>, use this function only if you know what you do. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1acd5daca2b7fc12e7f3403f8b3e998939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avahi_simple_poll_run</definition>
        <argsstring>(AvahiSimplePoll *s)</argsstring>
        <name>avahi_simple_poll_run</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The second stage of <ref refid="simple-watch_8h_1ad5b7c9d3b7a6584d609241ee6f472a2e" kindref="member">avahi_simple_poll_iterate()</ref>, use this function only if you know what you do. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1ad2684b9b22a528070b45c4e940d00249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avahi_simple_poll_dispatch</definition>
        <argsstring>(AvahiSimplePoll *s)</argsstring>
        <name>avahi_simple_poll_dispatch</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The third and final stage of <ref refid="simple-watch_8h_1ad5b7c9d3b7a6584d609241ee6f472a2e" kindref="member">avahi_simple_poll_iterate()</ref>, use this function only if you know what you do. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1a14b4cb29832e8c3de609d4c4e5611985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int avahi_simple_poll_loop</definition>
        <argsstring>(AvahiSimplePoll *s)</argsstring>
        <name>avahi_simple_poll_loop</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Call <ref refid="simple-watch_8h_1ad5b7c9d3b7a6584d609241ee6f472a2e" kindref="member">avahi_simple_poll_iterate()</ref> in a loop and return if it returns non-zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="simple-watch_8h_1ac42cb6d2830ca42df4bb44bbd7feb07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void avahi_simple_poll_wakeup</definition>
        <argsstring>(AvahiSimplePoll *s)</argsstring>
        <name>avahi_simple_poll_wakeup</name>
        <param>
          <type><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Wakeup the main loop. </para>        </briefdescription>
        <detaileddescription>
<para>(for threaded environments) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/simple-watch.h" line="81" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Simple poll() based main loop implementation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>foosimplewatchhfoo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>foosimplewatchhfoo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>avahi.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>avahi<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2.1<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>avahi<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/>See<sp/>the<sp/>GNU<sp/>Lesser<sp/>General</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>License<sp/>along<sp/>with<sp/>avahi;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/>02111-1307</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>USA.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">***/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor">#include<sp/>&lt;poll.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avahi-common/cdecl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="watch_8h" kindref="compound">avahi-common/watch.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">AVAHI_C_DECL_BEGIN</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*<ref refid="simple-watch_8h_1a4548a645c8ae50edd0617c8d9a15a9bd" kindref="member">avahi_simple_poll_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1a2d23c812725d77cf4c6478d249bb434e" kindref="member">avahi_simple_poll_free</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_avahi_poll" kindref="compound">AvahiPoll</ref>*<sp/><ref refid="simple-watch_8h_1a8e7a53b4116c2379d04f8298398e59e8" kindref="member">avahi_simple_poll_get</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1ad5b7c9d3b7a6584d609241ee6f472a2e" kindref="member">avahi_simple_poll_iterate</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sleep_time);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1ac2771664e4e6c7e75e5b5a270e5e0490" kindref="member">avahi_simple_poll_quit</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="simple-watch_8h_1a01aa2227371c60cb28c03c0db518790a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="simple-watch_8h_1a01aa2227371c60cb28c03c0db518790a" kindref="member">AvahiPollFunc</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pollfd<sp/>*ufds,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfds,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1a5bf2e34462070d8e035ec092da13eac5" kindref="member">avahi_simple_poll_set_func</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s,<sp/><ref refid="simple-watch_8h_1a01aa2227371c60cb28c03c0db518790a" kindref="member">AvahiPollFunc</ref><sp/>func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1ac32aace91b19902bd70633590823e730" kindref="member">avahi_simple_poll_prepare</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1acd5daca2b7fc12e7f3403f8b3e998939" kindref="member">avahi_simple_poll_run</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1ad2684b9b22a528070b45c4e940d00249" kindref="member">avahi_simple_poll_dispatch</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1a14b4cb29832e8c3de609d4c4e5611985" kindref="member">avahi_simple_poll_loop</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="simple-watch_8h_1ac42cb6d2830ca42df4bb44bbd7feb07d" kindref="member">avahi_simple_poll_wakeup</ref>(<ref refid="simple-watch_8h_1a0e40ccdfdc9d60e7baf0c312347f79b2" kindref="member">AvahiSimplePoll</ref><sp/>*s);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">AVAHI_C_DECL_END</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="avahi-common/simple-watch.h"/>
  </compounddef>
</doxygen>
