<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="struct_avahi_poll" kind="struct" language="C++" prot="public">
    <compoundname>AvahiPoll</compoundname>
    <includes refid="watch_8h" local="no">avahi-common/watch.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_avahi_poll_1a197dd32ad17917ea3f421414a047f368" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* AvahiPoll::userdata</definition>
        <argsstring></argsstring>
        <name>userdata</name>
        <briefdescription>
<para>Some abstract user data usable by the provider of the API. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="63" column="1" bodyfile="avahi-common/watch.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_avahi_poll_1acf59dc0ace2682e2d18225d4a0f9609c" prot="public" static="no" mutable="no">
        <type><ref refid="watch_8h_1afd7706bc6d19570049ca837f7a5ae262" kindref="member">AvahiWatch</ref> *(*</type>
        <definition>AvahiWatch*(* AvahiPoll::watch_new) (const AvahiPoll *api, int fd, AvahiWatchEvent event, AvahiWatchCallback callback, void *userdata)</definition>
        <argsstring>)(const AvahiPoll *api, int fd, AvahiWatchEvent event, AvahiWatchCallback callback, void *userdata)</argsstring>
        <name>watch_new</name>
        <briefdescription>
<para>Create a new watch for the specified file descriptor and for the specified events. </para>        </briefdescription>
        <detaileddescription>
<para>The API will call the callback function whenever any of the events happens. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="68" column="1" bodyfile="avahi-common/watch.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_avahi_poll_1a64292a4216965c97b9609834be0fcd1e" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* AvahiPoll::watch_update) (AvahiWatch *w, AvahiWatchEvent event)</definition>
        <argsstring>)(AvahiWatch *w, AvahiWatchEvent event)</argsstring>
        <name>watch_update</name>
        <briefdescription>
<para>Update the events to wait for. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function from an AvahiWatchCallback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="71" column="1" bodyfile="avahi-common/watch.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_avahi_poll_1a6f3b2a7cfcbabfbff6fe2b4833baed0b" prot="public" static="no" mutable="no">
        <type><ref refid="watch_8h_1ab1145cb8739036ece0ebe02ad0f4b93c" kindref="member">AvahiWatchEvent</ref>(*</type>
        <definition>AvahiWatchEvent(* AvahiPoll::watch_get_events) (AvahiWatch *w)</definition>
        <argsstring>)(AvahiWatch *w)</argsstring>
        <name>watch_get_events</name>
        <briefdescription>
<para>Return the events that happened. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function from an AvahiWatchCallback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="74" column="1" bodyfile="avahi-common/watch.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_avahi_poll_1ac52a247915e919cb5ca335068beb3452" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* AvahiPoll::watch_free) (AvahiWatch *w)</definition>
        <argsstring>)(AvahiWatch *w)</argsstring>
        <name>watch_free</name>
        <briefdescription>
<para>Free a watch. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function from an AvahiWatchCallback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="77" column="1" bodyfile="avahi-common/watch.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_avahi_poll_1abc2890fd69c1753aae84fb8e48044be4" prot="public" static="no" mutable="no">
        <type><ref refid="watch_8h_1a7c49ec2c98706902366ce0f74958626d" kindref="member">AvahiTimeout</ref> *(*</type>
        <definition>AvahiTimeout*(* AvahiPoll::timeout_new) (const AvahiPoll *api, const struct timeval *tv, AvahiTimeoutCallback callback, void *userdata)</definition>
        <argsstring>)(const AvahiPoll *api, const struct timeval *tv, AvahiTimeoutCallback callback, void *userdata)</argsstring>
        <name>timeout_new</name>
        <briefdescription>
<para>Set a wakeup time for the polling loop. </para>        </briefdescription>
        <detaileddescription>
<para>The API will call the callback function when the absolute time *tv is reached. If tv is NULL, the timeout is disabled. After the timeout expired the callback function will be called and the timeout is disabled. You can reenable it by calling <ref refid="struct_avahi_poll_1ae4a591cec4963cd877e6ed337f9000e1" kindref="member">timeout_update()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="84" column="1" bodyfile="avahi-common/watch.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_avahi_poll_1ae4a591cec4963cd877e6ed337f9000e1" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* AvahiPoll::timeout_update) (AvahiTimeout *, const struct timeval *tv)</definition>
        <argsstring>)(AvahiTimeout *, const struct timeval *tv)</argsstring>
        <name>timeout_update</name>
        <briefdescription>
<para>Update the absolute expiration time for a timeout, If tv is NULL, the timeout is disabled. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function from an AvahiTimeoutCallback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="88" column="1" bodyfile="avahi-common/watch.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_avahi_poll_1a7e25d9fa9e25b084b7c112e8a78e713a" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* AvahiPoll::timeout_free) (AvahiTimeout *t)</definition>
        <argsstring>)(AvahiTimeout *t)</argsstring>
        <name>timeout_free</name>
        <briefdescription>
<para>Free a timeout. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function from an AvahiTimeoutCallback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="avahi-common/watch.h" line="91" column="1" bodyfile="avahi-common/watch.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines an abstracted event polling API. </para>    </briefdescription>
    <detaileddescription>
<para>This may be used to connect Avahi to other main loops. This is loosely based on Unix poll(2). A consumer will call <ref refid="struct_avahi_poll_1acf59dc0ace2682e2d18225d4a0f9609c" kindref="member">watch_new()</ref> for all file descriptors it wants to listen for events on. In addition he can call <ref refid="struct_avahi_poll_1abc2890fd69c1753aae84fb8e48044be4" kindref="member">timeout_new()</ref> to define time based events . </para>    </detaileddescription>
    <collaborationgraph>
      <node id="66">
        <label>void *</label>
      </node>
      <node id="60">
        <label>void(*)(AvahiTimeout *t)</label>
      </node>
      <node id="65">
        <label>AvahiWatch *(*)(const AvahiPoll *api, int fd, AvahiWatchEvent event, AvahiWatchCallback callback, void *userdata)</label>
      </node>
      <node id="61">
        <label>void(*)(AvahiWatch *w)</label>
      </node>
      <node id="62">
        <label>AvahiWatchEvent(*)(AvahiWatch *w)</label>
      </node>
      <node id="58">
        <label>AvahiPoll</label>
        <link refid="struct_avahi_poll"/>
        <childnode refid="59" relation="usage">
          <edgelabel>timeout_update</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>timeout_free</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>watch_free</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>watch_get_events</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>watch_update</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>timeout_new</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>watch_new</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>userdata</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>void(*)(AvahiTimeout *, const struct timeval *tv)</label>
      </node>
      <node id="64">
        <label>AvahiTimeout *(*)(const AvahiPoll *api, const struct timeval *tv, AvahiTimeoutCallback callback, void *userdata)</label>
      </node>
      <node id="63">
        <label>void(*)(AvahiWatch *w, AvahiWatchEvent event)</label>
      </node>
    </collaborationgraph>
    <location file="avahi-common/watch.h" line="60" column="1" bodyfile="avahi-common/watch.h" bodystart="60" bodyend="92"/>
    <listofallmembers>
      <member refid="struct_avahi_poll_1a7e25d9fa9e25b084b7c112e8a78e713a" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>timeout_free</name></member>
      <member refid="struct_avahi_poll_1abc2890fd69c1753aae84fb8e48044be4" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>timeout_new</name></member>
      <member refid="struct_avahi_poll_1ae4a591cec4963cd877e6ed337f9000e1" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>timeout_update</name></member>
      <member refid="struct_avahi_poll_1a197dd32ad17917ea3f421414a047f368" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>userdata</name></member>
      <member refid="struct_avahi_poll_1ac52a247915e919cb5ca335068beb3452" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>watch_free</name></member>
      <member refid="struct_avahi_poll_1a6f3b2a7cfcbabfbff6fe2b4833baed0b" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>watch_get_events</name></member>
      <member refid="struct_avahi_poll_1acf59dc0ace2682e2d18225d4a0f9609c" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>watch_new</name></member>
      <member refid="struct_avahi_poll_1a64292a4216965c97b9609834be0fcd1e" prot="public" virt="non-virtual"><scope>AvahiPoll</scope><name>watch_update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
